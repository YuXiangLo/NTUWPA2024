openapi: 3.0.0
info:
  title: NestJS Supabase Authentication API
  version: "1.0.0"
servers:
  - url: http://localhost:3000
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email and password.
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword123
      responses:
        '201':
          description: User registered successfully
        '409':
          description: Email already registered
        '400':
          description: Bad Request
  /auth/login:
    post:
      summary: User Login
      description: Authenticates the user and returns a JWT.
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword123
      responses:
        '200':
          description: Login successful, returns a JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid credentials or bad request
  /user/profile:
    get:
      summary: Get current user profile
      description: Returns the profile information for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The user's profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized – invalid or missing JWT
    patch:
      summary: Update current user profile
      description: Update the authenticated user's profile information.
      security:
        - bearerAuth: []
      requestBody:
        description: User fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error or bad request
        '401':
          description: Unauthorized – invalid or missing JWT
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        userid:
          type: string
          example: "12345"
        gmail:
          type: string
          format: email
          example: user@example.com
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        nickname:
          type: string
          example: Johnny
        phone:
          type: string
          example: "123-456-7890"
        birthday:
          type: string
          format: date
          example: "1990-01-01"
        location:
          type: string
          example: New York
        level:
          type: integer
          example: 5
        photo:
          type: string
          format: uri
          example: https://example.com/johndoe.jpg
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-02-01T00:00:00.000Z"
    UpdateUserDto:
      type: object
      properties:
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        nickname:
          type: string
          example: Johnny
        phone:
          type: string
          example: "123-456-7890"
        birthday:
          type: string
          format: date
          example: "1990-01-01"
        location:
          type: string
          example: New York
        level:
          type: integer
          example: 5
        photo:
          type: string
          format: uri
          example: https://example.com/johndoe.jpg
